#version 460

#define threadBlockSize 64

layout(local_size_x = threadBlockSize, local_size_y = 1, local_size_z = 1) in;

struct ModelData {
    mat4 modelMat;
	mat4 viewNormalMatrix;
    vec3 modelOffset;
    vec3 positiveBounds;
    vec3 negativeBounds;
};

struct IndirectArguments{
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int vertexOffset;
    uint firstInstance;
};

struct CounterBuffer{
    uint counter;
    uint modelCountOffset;
};

layout(binding = 0) uniform CullingData {
    uint commandCount;
    uint modelTypes;
    vec2 xBounds;
    vec2 yBounds;
    vec2 zBounds;
} cullingData;

layout(binding = 1) readonly buffer InputArguments{
    IndirectArguments arguments[];
} inputData;

layout(binding = 2) buffer OutputArguments{
    IndirectArguments arguments[];
} outputData;

layout(binding = 3) buffer OutputCounter{
    CounterBuffer counters[];
} outputCounters;

layout(binding = 4) uniform CameraMatrices {
	mat4 view;
	mat4 projection;
} camera;

layout(binding = 5) readonly buffer Modeldata {
	ModelData models[];
} modelData;

bool IsVertexInsideBounds(vec4 vertex, mat4 transform) {
    vertex = transform * vertex;
    vertex /= vertex.w;

    if(cullingData.xBounds.x < vertex.x || vertex.x < cullingData.xBounds.y)
        return false;

    if(cullingData.yBounds.x < vertex.y || vertex.y < cullingData.yBounds.y)
        return false;

    if(cullingData.zBounds.x < vertex.z || vertex.z < cullingData.zBounds.y)
        return false;

    return true;
}

bool IsModelInsideBounds(uint index) {
    ModelData modelDataInst = modelData.models[index];

    vec3 positives = modelDataInst.positiveBounds;
    vec3 negatives = modelDataInst.negativeBounds;
    vec3 offsets = modelDataInst.modelOffset;

    mat4 transform = camera.projection * camera.view * modelDataInst.modelMat;

    vec4 vertex0 = vec4(vec3(negatives.x, positives.y, negatives.z) + offsets, 1.0);
    if(IsVertexInsideBounds(vertex0, transform))
        return true;

    vec4 vertex1 = vec4(vec3(positives.x, positives.y, negatives.z) + offsets, 1.0);
    if(IsVertexInsideBounds(vertex1, transform))
        return true;

    vec4 vertex2 = vec4(vec3(negatives.x, negatives.y, negatives.z) + offsets, 1.0);
    if(IsVertexInsideBounds(vertex2, transform))
        return true;

    vec4 vertex3 = vec4(vec3(positives.x, negatives.y, negatives.z) + offsets, 1.0);
    if(IsVertexInsideBounds(vertex3, transform))
        return true;

    vec4 vertex4 = vec4(vec3(negatives.x, positives.y, positives.z) + offsets, 1.0);
    if(IsVertexInsideBounds(vertex4, transform))
        return true;

    vec4 vertex5 = vec4(vec3(positives.x, positives.y, positives.z) + offsets, 1.0);
    if(IsVertexInsideBounds(vertex5, transform))
        return true;

    vec4 vertex6 = vec4(vec3(negatives.x, negatives.y, positives.z) + offsets, 1.0);
    if(IsVertexInsideBounds(vertex6, transform))
        return true;

    vec4 vertex7 = vec4(vec3(positives.x, negatives.y, positives.z) + offsets, 1.0);
    if(IsVertexInsideBounds(vertex7, transform))
        return true;

    return false;
}

void main() {
    uint threadIndex = (gl_WorkGroupID.x * threadBlockSize) + gl_LocalInvocationIndex;

    if(threadIndex < cullingData.commandCount)
        if(IsModelInsideBounds(threadIndex)) {
            uint currentCounterIndex = 0;
            for(uint typeIndex = 0; typeIndex < cullingData.modelTypes; ++typeIndex){
                if(outputCounters.counters[typeIndex].modelCountOffset <= threadIndex)
                    currentCounterIndex = typeIndex;
                else
                    break;
            }

            uint oldCounterValue = atomicAdd(
                outputCounters.counters[currentCounterIndex].counter, 1
            );
            uint modelWriteIndex =
                outputCounters.counters[currentCounterIndex].modelCountOffset
                + oldCounterValue;

            outputData.arguments[modelWriteIndex] = inputData.arguments[threadIndex];
        }
}
