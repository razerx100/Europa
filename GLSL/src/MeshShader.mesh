#version 460

#extension GL_EXT_mesh_shader : require

layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
layout(max_vertices = 64, max_primitives = 126) out;
layout(triangles) out;

layout(location = 0) out VetexOut{
	vec3 viewVertexPosition;
	vec3 normal;
	vec2 uv;
	uint modelIndex;
} vOut[];

struct ModelData {
    mat4 modelMat;
	mat4 viewNormalMatrix;
    vec3 modelOffset;
};

struct Meshlet {
	uint vertCount;
    uint vertOffset;
    uint primCount;
    uint primOffset;
};

struct Vertex {
    vec3 position;
    vec3 normal;
    vec2 uv;
};

struct VertexOut {
	vec4 glPosition;
	vec3 viewVertexPosition;
	vec3 normal;
	vec2 uv;
	uint modelIndex;
};

layout(push_constant) uniform ModelInfo {
    uint index;
    uint meshletOffset;
} modelInfo;

layout(binding = 0) readonly buffer VertexData {
	Vertex vertices[];
} vertexData;

layout(binding = 1) readonly buffer VertexIndexData {
	uint vertexIndices[];
} vertexIndexData;

layout(binding = 2) readonly buffer PrimitiveIndexData {
	uint primIndices[];
} primIndexData;

layout(binding = 3) readonly buffer MeshletData {
	Meshlet meshlets[];
} meshletData;

layout(binding = 4) uniform CameraMatrices {
	mat4 view;
	mat4 projection;
} camera;

layout(binding = 5) readonly buffer Modeldata {
	ModelData models[];
} modelData;

uvec3 UnpackPrimitive(uint primitive) {
	return uvec3(primitive & 0x3FF, (primitive >> 10) & 0x3FF, (primitive >> 20) & 0x3FF);
}

uvec3 GetPrimitive(Meshlet meshlet, uint index) {
	return UnpackPrimitive(primIndexData.primIndices[meshlet.primOffset + index]);
}

uint GetVertexIndex(Meshlet meshlet, uint localIndex) {
	return vertexIndexData.vertexIndices[meshlet.vertOffset + localIndex];
}

VertexOut GetVertexAttributes(
    mat4 modelM, mat4 viewM, mat4 projectionM, mat4 viewNormalM, Vertex vertex,
	vec3 modelOffset, uint modelIndex
) {
    mat4 viewSpace = viewM * modelM;
    vec4 vertexPosition = vec4(vertex.position + modelOffset, 1.0);
    vec4 viewVertexPosition = viewSpace * vertexPosition;

    VertexOut vout;
    vout.glPosition = projectionM * viewVertexPosition;
    vout.viewVertexPosition = viewVertexPosition.xyz;
    vout.normal = mat3(viewNormalM) * vertex.normal;
    vout.uv = vertex.uv;
    vout.modelIndex = modelIndex;

    return vout;
}

VertexOut GetVertexAttributes(uint modelIndex, uint vertexIndex) {
    Vertex vertex = vertexData.vertices[vertexIndex];

    const ModelData model = modelData.models[modelIndex];

	return GetVertexAttributes(
		model.modelMat, camera.view, camera.projection, model.viewNormalMatrix, vertex,
		model.modelOffset, modelIndex
	);
}

void SetOutputs(uint threadIndex, VertexOut pvOut) {
	vOut[threadIndex].uv = pvOut.uv;
	vOut[threadIndex].modelIndex = pvOut.modelIndex;
	vOut[threadIndex].viewVertexPosition = pvOut.viewVertexPosition;
	vOut[threadIndex].normal = pvOut.normal;
}

void main() {
	const uint gid = gl_WorkGroupID.x;
	const uint gtid = gl_LocalInvocationID.x;

	Meshlet meshlet = meshletData.meshlets[modelInfo.meshletOffset + gid];

	SetMeshOutputsEXT(meshlet.vertCount, meshlet.primCount);

	if(gtid < meshlet.primCount)
		gl_PrimitiveTriangleIndicesEXT[gtid] = GetPrimitive(meshlet, gtid);

	if(gtid < meshlet.vertCount){
		VertexOut pvOut = GetVertexAttributes(modelInfo.index, GetVertexIndex(meshlet, gtid));

		gl_MeshVerticesEXT[gtid].gl_Position = pvOut.glPosition;
		SetOutputs(gtid, pvOut);
	}
}
