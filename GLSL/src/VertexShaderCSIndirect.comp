#version 460

#define threadBlockSize 64

layout(local_size_x = threadBlockSize, local_size_y = 1, local_size_z = 1) in;

struct ModelData
{
    mat4 modelMatrix;
    vec4 modelOffset; // materialIndex on the last component.
};

struct IndirectArguments
{
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int  vertexOffset;
    uint firstInstance;
};

struct CullingData
{
    uint commandCount;
    uint commandOffset;
};

struct MaxBounds
{
    vec2 xBounds;
    vec2 yBounds;
    vec2 zBounds;
};

struct MeshDetails
{
    uint boundOffset;
    uint boundCount;
};

layout(push_constant) uniform Constantdata
{
    MaxBounds bounds;
} constantData;

layout(binding = 0) readonly buffer Modeldata
{
	ModelData models[];
} modelData;

layout(binding = 1) readonly buffer ModelIndices
{
	uint indices[];
} modelIndices;

layout(binding = 2) readonly buffer InputArguments
{
    IndirectArguments arguments[];
} inputData;

layout(binding = 3) readonly buffer Cullingdata
{
    CullingData data[];
} cullingData;

layout(binding = 4) buffer OutputArguments
{
    IndirectArguments arguments[];
} outputData;

layout(binding = 5) buffer OutputCounter
{
    uint counters[];
} outputCounters;

layout(binding = 6) readonly buffer ModelBundleIndices
{
    uint indices[];
} modelBundleIndices;

layout(binding = 7) readonly buffer MeshBounds
{
    vec3 bounds[];
} meshBounds;

layout(binding = 8) readonly buffer MeshIndices
{
    uint indices[];
} meshIndices;

layout(binding = 9) readonly buffer Meshdetails
{
    MeshDetails details[];
} meshDetails;

layout(binding = 10) uniform CameraMatrices
{
	mat4 view;
	mat4 projection;
} camera;

bool IsVertexInsideBounds(vec4 vertex, mat4 transform)
{
    vertex  = transform * vertex;
    vertex /= vertex.w;

    MaxBounds mBounds = constantData.bounds;

    if(mBounds.xBounds.x < vertex.x || vertex.x < mBounds.xBounds.y)
        return false;

    if(mBounds.yBounds.x < vertex.y || vertex.y < mBounds.yBounds.y)
        return false;

    if(mBounds.zBounds.x < vertex.z || vertex.z < mBounds.zBounds.y)
        return false;

    return true;
}

bool IsModelInsideBounds(uint index)
{
    uint modelIndex         = modelIndices.indices[index];
    // A model bundle can have more than a single model. But all of the models
    // of the same Model bundle should have the same mesh. So, use the bundle
    // index to get the mesh index.
    uint modelBundleIndex   = modelBundleIndices.indices[modelIndex];
    uint meshIndex          = meshIndices.indices[modelBundleIndex];
    ModelData modelDataInst = modelData.models[modelIndex];
    MeshDetails details     = meshDetails.details[meshIndex];

    vec3 modelOffset = modelDataInst.modelOffset.xyz;
    mat4 transform   = camera.projection * camera.view * modelDataInst.modelMatrix;
    uint boundEnd    = details.boundOffset + details.boundCount;

    for(uint index = details.boundOffset; index < boundEnd; ++index)
    {
        vec4 boundVertex = vec4(meshBounds.bounds[index] + modelOffset, 1.0);

        if (IsVertexInsideBounds(boundVertex, transform))
            return true;
    }

    return false;
}

void main()
{
    uint threadIndex      = gl_WorkGroupID.x * threadBlockSize + gl_LocalInvocationIndex;
    uint modelIndex       = modelIndices.indices[threadIndex];
    uint modelBundleIndex = modelBundleIndices.indices[modelIndex];
    CullingData cData     = cullingData.data[modelBundleIndex];

    uint commandEnd       = cData.commandOffset + cData.commandCount;

    // Only process the models which are in the range of the bundle's commands.
    if (cData.commandOffset <= threadIndex && threadIndex < commandEnd)
    {
        if (IsModelInsideBounds(threadIndex))
        {
            // If the model is inside the bounds, increase the counter by 1.
            // Using the bundle index to index, because each bundle should have its
            // own counter and arguments range.
            uint oldCounterValue = atomicAdd(outputCounters.counters[modelBundleIndex], 1);

            // The argument buffer for this model bundle should start at the commandOffset.
            // Since each argument represent each model, we should put the arguments of the
            // models which are inside the bounds back to back. The old counter value + the
            // offset should be the latest available model index.
            // The reason I am doing it before assigning the argument is because multiple
            // threads could try to write to the same index. But because of the atomicAdd
            // the old value should be unique for this bundle's range. The argument assignment
            // isn't atomic though.
            uint modelWriteIndex = cullingData.data[modelIndex].commandOffset + oldCounterValue;
            outputData.arguments[modelWriteIndex] = inputData.arguments[threadIndex];
        }
    }
}
